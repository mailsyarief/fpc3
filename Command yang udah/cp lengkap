#include "types.h"
#include "stat.h"
#include "user.h"
#include "fcntl.h"
#include "fs.h"

char buf[512];

//list every file
char* fmtname(char *path)
{
    //static char buf[DIRSIZ+1];
    char *p;

    // Find first character after last slash.
    for(p=path+strlen(path); p >= path && *p != '/'; p--);
    p++;

    // Return blank-padded name.
    if(strlen(p) >= DIRSIZ) return p;

    //memmove(buf, p, strlen(p));
    //memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
    return p;
}

int absolute_path(char *dir){
    char *next = {""};
    next = strcat(next,dir);
    next = strcat(next,"/");
    next = strcat(next,".pwd");

    int next_pwd;

    next_pwd = open(next,O_CREATE | O_RDWR);
    write(next_pwd,dir,strlen(dir));
    write(next_pwd,"/",1);
    close(next_pwd);
    return 1;
}
void cp(char *from, char *to)
{
  int fd0,fd1, n;
  
  if((fd0 = open(from, O_RDONLY)) < 0){
      printf(1, "cp: cannot open %s\n", argv[1]);
      exit();
    }

    if((fd1 = open(to, O_CREATE|O_RDWR)) < 0){
      printf(1, "cp: cannot open %s\n", argv[2]);
      exit();
    }
    while( ( n = read ( fd0, buf, sizeof(buf))) > 0 ){
      write( fd1, buf, n );
    }
    close(fd0);
    close(fd1);
  exit();

  return;
}
void cp_recursion(char *path,char *destination)
{
    char buf[512], *p;
    int fd;
    struct dirent de;
    struct stat st;

    char *dummy = malloc(1024);
    memset(dummy,0,1024);
    strcat(dummy,path);
    strcat(dummy,".");

    if((fd = open(dummy, 0)) < 0){
        printf(2, "ls: cannot open %s\n", dummy);
        return;
    }

    if(fstat(fd, &st) < 0){
        printf(2, "ls: cannot stat %s\n", dummy);
        close(fd);
        return;
    }

    switch(st.type){
        case T_FILE:
            printf(1, "%s %d %d %d\n", fmtname(dummy), st.type, st.ino, st.size);
            break;

        case T_DIR:
            if(strlen(dummy) + 1 + DIRSIZ + 1 > sizeof buf){
                printf(1, "ls: path too long\n");
                break;
            }
            strcpy(buf, dummy);
            p = buf+strlen(buf);
            *p++ = '/';

            while(read(fd, &de, sizeof(de)) == sizeof(de)){
                if(de.inum == 0) continue;
                memmove(p, de.name, DIRSIZ);
                p[DIRSIZ] = 0;
                if(stat(buf, &st) < 0){
                    printf(1, "ls: cannot stat %s\n", buf);
                    continue;
                }
                if (fmtname(buf)[0] != '.' && st.type == T_FILE){
                    printf(1,"File Type\n");
                    char *name = fmtname(buf);

                    char *next_source = malloc(100);
                    memset(next_source,0,100);
                    strcat(next_source,dummy);
                    next_source[strlen(next_source)-1]='\0';
                    strcat(next_source,name);

                    char *next_destination = malloc(100);
                    memset(next_destination,0,100);
                    strcat(next_destination,destination);
                    strcat(next_destination,name);

                    printf(1,"path %s\n",next_source);
                    printf(1,"dest %s\n",next_destination);

                    cp(next_source,next_destination);
                }
                if (fmtname(buf)[0] != '.' && st.type == T_DIR){
                    printf(1,"Directory Type\n");
                    char *name = fmtname(buf);

                    char *next_source = malloc(100);
                    memset(next_source,0,100);
                    strcat(next_source,dummy);
                    next_source[strlen(next_source)-1]='\0';
                    strcat(next_source,name);
                    strcat(next_source,"/");

                    char *next_destination = malloc(100);
                    memset(next_destination,0,100);
                    strcat(next_destination,destination);
                    strcat(next_destination,name);
                    mkdir(next_destination);
                    absolute_path(next_destination);
                    strcat(next_destination,"/");

                    printf(1,"path %s\n",next_source);
                    printf(1,"dest %s\n",next_destination);

                    cp_recursion(next_source,next_destination);
                }
            }
            break;
    }
    close(fd);
}

void cp_all(char *path,char *destination)
{
    ///*
    char buf[512], *p;
    int fd;
    struct dirent de;
    struct stat st;
    //*/

    char *dummy = malloc(1024);
    memset(dummy,0,1024);
    strcat(dummy,path);
    //dummy[strlen(dummy)-1] = '\0';
    strcat(dummy,".");

    if((fd = open(dummy, 0)) < 0){
        printf(2, "ls: cannot open %s\n", dummy);
        return;
    }

    if(fstat(fd, &st) < 0){
        printf(2, "ls: cannot stat %s\n", dummy);
        close(fd);
        return;
    }

    switch(st.type){
        case T_FILE:
            printf(1, "%s %d %d %d\n", fmtname(dummy), st.type, st.ino, st.size);
            break;

        case T_DIR:
            if(strlen(dummy) + 1 + DIRSIZ + 1 > sizeof buf){
                printf(1, "ls: path too long\n");
                break;
            }
            strcpy(buf, dummy);
            p = buf+strlen(buf);
            *p++ = '/';

            while(read(fd, &de, sizeof(de)) == sizeof(de)){
                if(de.inum == 0) continue;
                memmove(p, de.name, DIRSIZ);
                p[DIRSIZ] = 0;
                if(stat(buf, &st) < 0){
                    printf(1, "ls: cannot stat %s\n", buf);
                    continue;
                }
                if (fmtname(buf)[0] != '.' && st.type == T_FILE){
                    char *name = fmtname(buf);

                    char *tmp1 = malloc(100);
                    memset(tmp1,0,100);
                    strcat(tmp1,dummy);
                    tmp1[strlen(tmp1)-1]='\0';
                    strcat(tmp1,name);

                    char *tmp = malloc(100);
                    memset(tmp,0,100);
                    strcat(tmp,destination);
                    strcat(tmp,name);
                    cp(tmp1,tmp);
                }
            }
            break;
    }
    close(fd);
}

int main(int argc, char *argv[])
{
  int all=0,s1,s2;

  if(argc <= 2){
    printf(1, "Need 2 arguments!!\n");
    exit();
  }
  // apakah cp*
  if (argv[1][strlen(argv[1])-1] == '*')
  {
        all = 1;
        argv[1][strlen(argv[1])-1] = '\0';
  }
  struct stat st1;
  struct stat st2;
  // cek apakah cp -R
  if (argv[1][0] == '-' && argv[1][1] == 'R')
  {
       s1 = open(argv[2],O_RDONLY);
       s2 = open(argv[3],O_RDONLY);
       fstat(s1, &st1);
       fstat(s2, &st2);
       if (st1.type == T_DIR && st2.type == T_DIR)
       {
           cp_recursion(argv[2],argv[3]);
           exit();
       }
       else
       {
	   printf(1," format harus cp -R /[Folder]/ /[Folder]/");
	   exit();
       }
  }

  else
  {
	if(all == 1) //jika cp*
	{
		s1 = open(argv[1],O_RDONLY);
        	s2 = open(argv[2],O_RDONLY);
        	fstat(s1, &st1);
        	fstat(s2, &st2);

		if (st1.type == T_DIR && st2.type == T_DIR)
		{
        	    cp_all(argv[1],argv[2]);
        	    exit();
        	}

		else
		{
			printf(1," format harus cp /[Folder]/* /[Folder]/");
	   		exit();
		}
	}
	
	else 
	{
		cp(argv[1],argv[2]);
            	exit();
	}
}
	exit();
}


 

  
}
